openapi: 3.1.1
info:
  title: FakeAPI Store
  version: 1.2.3
  description:  |-
    This is a sample FakeAPI Store Server based on the OpenAPI 3.X specification. You can find out more about 
    Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach. 
    You can now help us improve the API whether it's by making changes to the definition itself or to the code. 
    That way, with time, we can improve the API in general, and expose some of the new features in OAS3.
    
    Some useful links:
    - [The Fake Store repository](https://github.com/platzi/curso-apifirst)
  termsOfService: https://platzi.com/terms/
  contact:
    name: Platzi
    url: https://platzi.com
    email: support@platzi.com
  license:
    name: MIT
    url: https://opensource.org/license/mit/
externalDocs:
  description: Find out more about the API
  url: https://github.com/platzi/curso-apifirst
tags:
  - name: Users
    description: Operations related to users
  - name: Products
    description: Operations related to products
    externalDocs:
      description: Find out more about products
      url: https://github.com/platzi/curso-apifirst
servers: 
  - url: http://localhost:3000/v1
    description: Version 1 of the API
  - url: http://localhost:3000/v2
    description: Version 2 of the API
components:
  schemas:
    HelloResponse:
      type: object  
    Product:
      type: object
      required:
        - name
        - price
        - category
      properties:
        name:
          type: string
          minLength: 2
          maxLength: 40
          example: "Apple iPhone 15 Pro"
        description:
          type: string
          maxLength: 500
          example: "The latest Apple iPhone 15 Pro features a 6.1-inch Super Retina XDR display, A17 Pro chip, triple camera system, and all-day battery life."
        price:
          type: number
          minimum: 0
          multipleOf: 0.01
          example: 1199.99
        category:
          type: string
          enum: [electronics, books, clothes, food]
          example: electronics
        tags:
          type: array
          items:
            type: string
          minItems: 1
          example: ["smartphone", "apple", "ios"]
        inStock:
          type: boolean
          example: true
        specifications:
          type: object
          additionalProperties:
            type: string
          example:
            color: "Natural Titanium"
            storage: "256GB"
            connectivity: "5G"
        ratings:
          type: array
          items:
            type: object
            required:
              - score
              - comment
            properties:
              score:
                type: number
                minimum: 0
                maximum: 5
                example: 4.8
              comment:
                type: string
                maxLength: 200
                example: "Amazing performance and camera quality!"
          example:
            - score: 5
              comment: "Best phone I've ever used!"
            - score: 4.5
              comment: "Great features, but a bit pricey."
  securitySchemes:
    JWT:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token for authentication
security:
  - JWT: []
paths:
  /auth/login:
    post:
      tags:
        - Users
      summary: Authenticate user and return JWT
      security: [] # This disables global security for this endpoint
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
                  minLength: 6
      responses:
        '200':
          description: JWT token returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: JWT token for authentication
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiZW1haWwiOiJ1c2VyQGV4YW1wbGUuY29tIn0.abc123"
                  user:
                    type: object
                    properties:
                      id:
                        type: string
                      email:
                        type: string
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /hello:
    get:
      summary: Hello World
      responses:
        '200':
          description: A successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelloResponse'
  /products:
    post:
      tags:
        - Products
      summary: Create a new product
      security:
        - JWT: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
            example:
              name: "Apple iPhone 15 Pro"
              description: "The latest Apple iPhone 15 Pro features a 6.1-inch Super Retina XDR display, A17 Pro chip, triple camera system, and all-day battery life."
              price: 800.99
              category: electronics
              tags: ["smartphone", "apple", "ios"]
              inStock: true
              specifications:
                color: "Natural Titanium"
                storage: "256GB"
                connectivity: "5G"
              ratings:
                - score: 5
                  comment: "Best phone I've ever used!" 
                - score: 4.5
                  comment: "Great features, but a bit pricey."  
      responses:
        '201':
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
    get:
      tags:
        - Products
      summary: Get all products
      responses:
        '200':
          description: A list of products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
  /products/{id}:
    get:
      tags:
        - Products
      summary: Get product by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Product found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
    put:
      tags:
        - Products
      summary: Update product by ID
      security:
        - JWT: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '200':
          description: Product updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
    delete:
      tags:
        - Products
      summary: Delete product by ID
      security:
        - JWT: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Product deleted successfully
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /users:
    post:
      tags:
        - Users
      summary: Create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - age
                - email
              properties:
                name:
                  type: string
                  minLength: 2
                age:
                  type: integer
                  minimum: 18
                email:
                  type: string
                  format: email
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  name:
                    type: string
                  age:
                    type: integer
                  email:
                    type: string
  /users/{id}:
    get:
      tags:
        - Users
      summary: Get user by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                  
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User not found
    put:
      tags:
        - Users
      summary: Update user by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - age
                - email
              properties:
                name:
                  type: string
                  minLength: 2
                age:
                  type: integer
                  minimum: 18
                email:
                  type: string
                  format: email
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                  age:
                    type: integer
                  email:
                    type: string
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
            
  




